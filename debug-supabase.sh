#!/bin/bash

# Script de diagnostic pour probl√®mes de connexion Supabase
# Usage: ./debug-supabase.sh [supabase-url] [supabase-key]

set -e

# Couleurs pour la sortie
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() {
    echo -e "${GREEN}[$(date +'%H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%H:%M:%S')] WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%H:%M:%S')] ERROR: $1${NC}"
}

info() {
    echo -e "${BLUE}[$(date +'%H:%M:%S')] INFO: $1${NC}"
}

# V√©rifier les arguments
if [ $# -lt 2 ]; then
    echo "Usage: $0 <SUPABASE_URL> <SUPABASE_KEY>"
    echo ""
    echo "Exemple:"
    echo "  $0 https://your-project.supabase.co your-service-key"
    echo ""
    echo "Pour obtenir ces informations:"
    echo "  1. Allez sur https://app.supabase.com"
    echo "  2. S√©lectionnez votre projet"
    echo "  3. Allez dans Settings > API"
    echo "  4. Copiez l'URL du projet et la cl√© de service (service_role key)"
    exit 1
fi

SUPABASE_URL="$1"
SUPABASE_KEY="$2"

log "=== DIAGNOSTIC SUPABASE ==="

# Test 1: V√©rifier le format de l'URL
info "Test 1: V√©rification du format de l'URL"
if [[ $SUPABASE_URL =~ ^https://[a-z0-9-]+\.supabase\.co$ ]]; then
    log "‚úì Format d'URL correct"
    PROJECT_ID=$(echo $SUPABASE_URL | sed 's/https:\/\/\([^.]*\)\.supabase\.co/\1/')
    info "  Project ID: $PROJECT_ID"
else
    error "‚úó Format d'URL incorrect. Doit √™tre: https://your-project.supabase.co"
    exit 1
fi

# Test 2: V√©rifier la longueur de la cl√©
info "Test 2: V√©rification de la cl√© de service"
if [ ${#SUPABASE_KEY} -lt 50 ]; then
    warn "‚úó La cl√© semble trop courte (${#SUPABASE_KEY} caract√®res)"
    warn "  Assurez-vous d'utiliser la 'service_role' key, pas la 'anon' key"
else
    log "‚úì Longueur de cl√© correcte (${#SUPABASE_KEY} caract√®res)"
fi

# Test 3: V√©rifier la connectivit√© r√©seau
info "Test 3: V√©rification de la connectivit√© r√©seau"
if curl -s --connect-timeout 10 "$SUPABASE_URL" > /dev/null; then
    log "‚úì Connectivit√© r√©seau OK"
else
    error "‚úó Impossible de joindre $SUPABASE_URL"
    error "  V√©rifiez votre connexion internet"
    exit 1
fi

# Test 4: Tester l'API REST
info "Test 4: Test de l'API REST Supabase"
REST_URL="${SUPABASE_URL}/rest/v1/"
response=$(curl -s -w "%{http_code}" -H "apikey: $SUPABASE_KEY" -H "Authorization: Bearer $SUPABASE_KEY" "$REST_URL" || echo "000")

if [ "$response" = "200" ]; then
    log "‚úì API REST accessible"
elif [ "$response" = "401" ]; then
    error "‚úó Erreur d'authentification (401)"
    error "  V√©rifiez votre cl√© de service"
    exit 1
elif [ "$response" = "403" ]; then
    error "‚úó Acc√®s refus√© (403)"
    error "  V√©rifiez les permissions de votre cl√©"
    exit 1
else
    warn "‚úó R√©ponse inattendue: $response"
fi

# Test 5: Construire l'URL de base de donn√©es
info "Test 5: Construction de l'URL de base de donn√©es"
DB_HOST="db.${PROJECT_ID}.supabase.co"
DB_PORT="5432"
DB_NAME="postgres"
DB_USER="postgres"
DB_PASSWORD="$SUPABASE_KEY"

CONNECTION_STRING="postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=require"
info "  Host: $DB_HOST"
info "  Port: $DB_PORT"
info "  Database: $DB_NAME"
info "  User: $DB_USER"

# Test 6: V√©rifier la disponibilit√© du port
info "Test 6: Test de connectivit√© au port 5432"
if timeout 10 bash -c "cat < /dev/null > /dev/tcp/$DB_HOST/$DB_PORT"; then
    log "‚úì Port 5432 accessible"
else
    error "‚úó Port 5432 inaccessible"
    error "  Le projet Supabase est-il actif?"
    exit 1
fi

# Test 7: V√©rifier psql
info "Test 7: V√©rification de psql"
if command -v psql &> /dev/null; then
    local psql_version=$(psql --version | head -n1)
    log "‚úì psql disponible: $psql_version"
else
    error "‚úó psql non install√©"
    error "  Installez PostgreSQL client:"
    error "    Ubuntu/Debian: sudo apt-get install postgresql-client"
    error "    macOS: brew install postgresql"
    error "    Windows: T√©l√©chargez depuis postgresql.org"
    exit 1
fi

# Test 8: Test de connexion PostgreSQL
info "Test 8: Test de connexion PostgreSQL"
if timeout 30 psql "$CONNECTION_STRING" -c "SELECT 1;" > /dev/null 2>&1; then
    log "‚úì Connexion PostgreSQL r√©ussie"
else
    error "‚úó Connexion PostgreSQL √©chou√©e"
    
    # Diagnostics suppl√©mentaires
    warn "Diagnostics suppl√©mentaires:"
    
    # Test sans SSL
    info "  - Test sans SSL..."
    CONNECTION_STRING_NO_SSL="postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}"
    if timeout 10 psql "$CONNECTION_STRING_NO_SSL" -c "SELECT 1;" > /dev/null 2>&1; then
        warn "    ‚úì Connexion sans SSL r√©ussie"
        warn "    Probl√®me de configuration SSL"
    else
        warn "    ‚úó Connexion sans SSL √©chou√©e aussi"
    fi
    
    # Test avec un timeout plus long
    info "  - Test avec timeout √©tendu..."
    if timeout 60 psql "$CONNECTION_STRING" -c "SELECT 1;" > /dev/null 2>&1; then
        warn "    ‚úì Connexion r√©ussie avec timeout √©tendu"
        warn "    Probl√®me de latence r√©seau"
    else
        warn "    ‚úó Connexion √©chou√©e m√™me avec timeout √©tendu"
    fi
    
    # Afficher les d√©tails de l'erreur
    info "  - D√©tails de l'erreur:"
    psql "$CONNECTION_STRING" -c "SELECT 1;" 2>&1 | head -5 | while read line; do
        warn "    $line"
    done
    
    exit 1
fi

# Test 9: V√©rifier les privil√®ges
info "Test 9: V√©rification des privil√®ges"
if privileges=$(timeout 10 psql "$CONNECTION_STRING" -t -c "SELECT current_user, session_user;" 2>/dev/null); then
    log "‚úì Privil√®ges v√©rifi√©s"
    info "  User: $(echo $privileges | tr -d ' ')"
else
    warn "‚úó Impossible de v√©rifier les privil√®ges"
fi

# Test 10: V√©rifier les tables existantes
info "Test 10: V√©rification des tables existantes"
if tables=$(timeout 10 psql "$CONNECTION_STRING" -t -c "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public';" 2>/dev/null); then
    table_count=$(echo "$tables" | wc -l)
    if [ $table_count -gt 1 ]; then
        log "‚úì Tables existantes: $table_count"
        echo "$tables" | while read table; do
            [ -n "$table" ] && info "    - $(echo $table | tr -d ' ')"
        done
    else
        warn "‚úó Aucune table trouv√©e"
        warn "  La base de donn√©es est vide"
    fi
else
    warn "‚úó Impossible de lister les tables"
fi

# R√©sum√© et recommandations
log "=== R√âSUM√â ==="
echo ""
echo "URL du projet: $SUPABASE_URL"
echo "Cl√© de service: ${SUPABASE_KEY:0:20}..."
echo "URL de base de donn√©es: postgresql://postgres:***@$DB_HOST:$DB_PORT/$DB_NAME"
echo ""

log "=== RECOMMANDATIONS ==="
echo ""
echo "‚úÖ Actions recommand√©es:"
echo "  1. V√©rifiez que votre projet Supabase est actif"
echo "  2. Utilisez la 'service_role' key, pas la 'anon' key"
echo "  3. V√©rifiez les param√®tres de facturation (projet non suspendu)"
echo "  4. Testez depuis l'interface web Supabase d'abord"
echo ""

echo "üîß Variables d'environnement pour votre application:"
echo "DATABASE_URL=$CONNECTION_STRING"
echo "SUPABASE_URL=$SUPABASE_URL"
echo "SUPABASE_SERVICE_KEY=$SUPABASE_KEY"
echo ""

echo "üìù Prochaines √©tapes:"
echo "  1. Si tous les tests passent, r√©ex√©cutez deploy-supabase.sh"
echo "  2. Si des tests √©chouent, corrigez les probl√®mes identifi√©s"
echo "  3. Contactez le support Supabase si n√©cessaire"
echo ""

log "Diagnostic termin√©"