Crée une application CRM web moderne, réactive et sécurisée pour un courtier en assurance spécialisé dans la mutuelle santé. L’interface, les champs, les boutons, les alertes, et les messages doivent être intégralement en français.

Fonctionnalités attendues :

1. 👤 Gestion des clients :
   - Prénom, nom, date de naissance, numéro de sécurité sociale, téléphone, email, adresse complète.
   - Situation familiale (célibataire, marié, etc.), nombre d’ayants droit.
   - Informations sur la mutuelle actuelle (nom, niveau de couverture, etc.).

2. 📁 Gestion documentaire :
   - Téléverser et télécharger des documents : pièce d'identité, attestation de sécurité sociale, contrat signé.
   - Lier des documents à chaque fiche client.

3. 📄 Devis :
   - Formulaire de demande de devis avec champs dynamiques selon le profil.
   - Sauvegarde en brouillon.
   - Génération automatique d’un PDF du devis avec entête du cabinet.

4. 📊 Tableau de bord (Dashboard) :
   - Nombre total de clients.
   - Nombre de devis envoyés.
   - Nombre de contrats signés.
   - Filtres par date, statut (en attente, signé, relancé...).

5. ⏰ Agenda et rappels :
   - Système de rappel pour appels, relances, documents manquants, renouvellements.
   - Calendrier intégré (optionnel).

6. ☎️ Journal des appels :
   - Historique des appels passés aux clients : date, heure, notes, statut de l’appel (répondu, à rappeler, message vocal, etc.).

7. 🔐 Authentification :
   - Connexion / déconnexion.
   - Sécurité des mots de passe (bcrypt).
   - Système de session ou JWT.

8. 🌐 Technologies à utiliser :
   - Frontend : React.js + Tailwind CSS (interface claire, responsive, agréable).
   - Backend : Node.js + Express
   - Base de données : PostgreSQL (compatible Supabase)
   - Exportation PDF avec entête personnalisée
   - Structure prête à être versionnée sur GitHub
   - Prêt à être déployé sur Coolify ou Render

9. 🔔 Fonctionnalités bonus (si possible) :
   - Envoi automatique d’email lorsqu’un devis est généré.
   - Signature numérique simple du contrat.
   - Multi-utilisateur (admin, agents).

Structure modulaire avec code bien commenté et organisé selon le pattern MVC (Modèle – Vue – Contrôleur) ou une architecture logique par fonctionnalité. Ajoute un fichier `.env.example` pour faciliter le déploiement.
